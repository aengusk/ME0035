import time
import network
from mqtt import MQTTClient

import sensor
import time
import math

SSID = "Tufts_Robot"  # Network SSID
KEY = ""  # Network key

# Init wlan module and connect to network
wlan = network.WLAN(network.STA_IF)
wlan.active(True)
wlan.connect(SSID, KEY)

while not wlan.isconnected():
    print('Trying to connect to "{:s}"...'.format(SSID))
    time.sleep_ms(1000)

# We should have a valid IP now via DHCP
print("WiFi Connected", wlan.ifconfig())

mqtt_broker = "broker.hivemq.com"
port = 1883     # this reads anything sent to ME35
topic_pub = "ME35-24/prius5"

client = MQTTClient("ME35_chris", mqtt_broker, port, keepalive=60)
client.connect()

sensor.reset()
sensor.set_pixformat(sensor.RGB565)
sensor.set_framesize(sensor.QQVGA)
sensor.skip_frames(time=2000)
sensor.set_auto_gain(False)  # must turn this off to prevent image washout...
sensor.set_auto_whitebal(False)  # must turn this off to prevent image washout...
clock = time.clock()

# Proportional gain constant for velocity control
Kp_vel = 0.5  # Adjust this value as needed for speed control

desired_distance = 150  # The ideal distance from the tag, adjust as needed

while True:
    clock.tick()
    img = sensor.snapshot()
    for tag in img.find_apriltags():
        img.draw_rectangle(tag.rect, color=(255, 0, 0))
        img.draw_cross(tag.cx, tag.cy, color=(0, 255, 0))

        # VELOCITY CONTROL (forward/backward movement based on tag's distance)
        error_vel = tag.z_translation - desired_distance  # Distance control

        # Proportional control for speed (velocity)
        speed_value = Kp_vel * error_vel

        # Print the current distance and error values
        print("Current distance: %f" % tag.z_translation)
        print("Error (distance from desired): %f" % error_vel)
        print("Calculated speed: %f" % speed_value)

        # Generate command based on the distance
        if error_vel > 10:  # Too far, move forward
            command = "f" + ", " + str(speed_value)  # Forward with speed
            print("Command: Move forward with speed %f" % speed_value)
        elif error_vel < -10:  # Too close, move backward
            command = "b" + ", " + str(abs(speed_value))  # Backward with speed
            print("Command: Move backward with speed %f" % abs(speed_value))
        else:
            command = "s"  # Stop if close enough to the desired distance
            print("Command: Stop")

        # Publish the movement command
        client.publish(topic_pub, command)
        time.sleep_ms(10)

    # print the frames per second (fps)
    # print("FPS: %f" % clock.fps())
